<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using <#= Model.Namespace #>.Models;

namespace <#= Model.Namespace #>
{ <# var modelName = Model.ModelType; var contextName = Model.ContextType; #>

    public class <#= modelName #>Repository : I<#= modelName #>Repository
    {
        <#= contextName #> context = new <#= contextName #>();

        public IEnumerable<<#= modelName #>> GetAll<#= modelName #>s()
        {
            return this.context.<#= modelName #>s.ToList();
        }

        public <#= modelName #> GetById(int id)
        {
            return this.context.<#= modelName #>s.Find(id);
        }

        public void Add(<#= modelName #> <#= modelName.ToLower() #>)
        {
            this.context.<#= modelName #>s.Add(<#= modelName.ToLower() #>);
        }

        public void Delete(int id)
        {
            var d = this.context.<#= modelName #>s.Find(id);
            this.context.<#= modelName #>s.Remove(d);
        }

        public void Save()
        {
            this.context.SaveChanges();
        }
    }

	public interface I<#= modelName #>Repository
    {
        void Add(<#= modelName #> post);
        void Delete(int id);
        IEnumerable<<#= modelName #>> GetAll<#= modelName #>s();
        <#= modelName #> GetById(int id);
        void Save();
    }

}
