<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#
MvcTextTemplateHost mvcHost = (MvcTextTemplateHost)(Host);
#>
@model <#= mvcHost.ViewDataTypeName #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.
if(mvcHost.IsPartialView) {
#>

<#
} else if(mvcHost.IsContentPage) {
#>

@{
    ViewBag.Title = "<#= mvcHost.ViewName#>";
	<# if (String.IsNullOrEmpty(mvcHost.MasterPageFile) == false) { #>
		Layout = "<#= mvcHost.MasterPageFile#>";
	<# } #>
}

<h2><#= mvcHost.ViewName#></h2>
<#
} else {
#>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title><#= mvcHost.ViewName #></title>
</head>
<body>
<#
}
#>
<#
List<string> properties = new List<string>();
FilterProperties(mvcHost.ViewDataType, properties);
#>
    @using (Html.BeginForm()) {
        @Html.ValidationSummary(true)
        
        <fieldset>
            <legend>Fields</legend>
            
<#
foreach(string property in properties) {
#>
            <div class="editor-label">
                @Html.LabelFor(model => model.<#= property #>)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.<#= property #>)
                @Html.ValidationMessageFor(model => model.<#= property #>)
            </div>
            
<#
}
#>
            <p>
                <input type="submit" value="Save" />
            </p>
        </fieldset>

    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

<#
// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page
#>
<#
if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {
#>
</body>
</html>
<#
}
#>

<#+
public void FilterProperties(Type type, List<string> properties) {
    if(type != null) {
        PropertyInfo[] publicProperties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);

        foreach (PropertyInfo pi in publicProperties)
        {
            if (pi.GetIndexParameters().Length > 0)
            {
                continue;
            }
            
            Type currentPropertyType = pi.PropertyType;
            Type currentUnderlyingType = System.Nullable.GetUnderlyingType(currentPropertyType);
            
            if(currentUnderlyingType != null) {
                currentPropertyType = currentUnderlyingType;
            }
            
            if (IsBindableType(currentPropertyType) && pi.CanRead && pi.CanWrite)
            {
                properties.Add(pi.Name);
            }
        }
    }
}

public bool IsBindableType(Type type)
{
    bool isBindable = false;

    if (type.IsPrimitive || type.Equals(typeof(string)) || type.Equals(typeof(DateTime)) || type.Equals(typeof(decimal)) || type.Equals(typeof(Guid)) || type.Equals(typeof(DateTimeOffset)) || type.Equals(typeof(TimeSpan)))
    {
        isBindable = true;
    }

    return isBindable;
}
#>