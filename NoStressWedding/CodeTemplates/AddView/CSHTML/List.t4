<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#
MvcTextTemplateHost mvcHost = (MvcTextTemplateHost)(Host);
#>
@model IEnumerable<#= "<" + mvcHost.ViewDataTypeName + ">" #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.
if(mvcHost.IsPartialView) {
#>

<#
} else if(mvcHost.IsContentPage) {
#>

@{
    ViewBag.Title = "<#= mvcHost.ViewName#>";
	<# if (String.IsNullOrEmpty(mvcHost.MasterPageFile) == false) { #>
		Layout = "<#= mvcHost.MasterPageFile#>";
	<# } #>
}

    <h2><#= mvcHost.ViewName#></h2>

<#
} else {
#>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title><#= mvcHost.ViewName #></title>
</head>
<body>
<#
}
#>
<#
Dictionary<string, string> properties = new Dictionary<string, string>();
FilterProperties(mvcHost.ViewDataType, properties);
#>
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>

    <table>
        <tr>
            <th></th>
<#
foreach(KeyValuePair<string, string> property in properties) {
#>
            <th>
                <#= property.Key #>
            </th>
<#
}
#>
        </tr>

    @foreach (var item in Model) {
    
        <tr>
<#
List<string> primaryKeys = GetEntityKeyProperties(mvcHost.ViewDataType);
if(primaryKeys.Count > 0) {
#>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id=item.<#= primaryKeys[0] #> }) |
                @Html.ActionLink("Details", "Details", new { id=item.<#= primaryKeys[0] #> }) |
                @Html.ActionLink("Delete", "Delete", new { id=item.<#= primaryKeys[0] #> })
            </td>
<#
} else {
#>
            <td>
                @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
            </td>
<#
}
    
foreach(KeyValuePair<string, string> property in properties) {
#>
            <td>
                @<#= property.Value #>
            </td>
<#
}
#>
        </tr>
    
    }

    </table>

<#
// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page
#>
<#
if(mvcHost.IsContentPage) {
#>
<#
} else if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {
#>
</body>
</html>
<#
}
#>

<#+
public void FilterProperties(Type type, Dictionary<string, string> properties) {
    if(type != null) {
        PropertyInfo[] publicProperties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);

        foreach (PropertyInfo pi in publicProperties)
        {
            if (pi.GetIndexParameters().Length > 0)
            {
                continue;
            }
            
            Type currentPropertyType = pi.PropertyType;
            Type currentUnderlyingType = System.Nullable.GetUnderlyingType(currentPropertyType);
            
            if(currentUnderlyingType != null) {
                currentPropertyType = currentUnderlyingType;
            }
            
            if (IsBindableType(currentPropertyType) && pi.CanRead)
            {
                if(currentPropertyType.Equals(typeof(double)) || currentPropertyType.Equals(typeof(decimal))) {
                    properties.Add(pi.Name, "String.Format(\"{0:F}\", item." + pi.Name + ")");
                } else if(currentPropertyType.Equals(typeof(DateTime))) {
                    properties.Add(pi.Name, "String.Format(\"{0:g}\", item." + pi.Name + ")");
                } else {
                    properties.Add(pi.Name, "item." + pi.Name);
                }
            }
        }
    }
}

public bool IsBindableType(Type type)
{
    bool isBindable = false;

    if (type.IsPrimitive || type.Equals(typeof(string)) || type.Equals(typeof(DateTime)) || type.Equals(typeof(decimal)) || type.Equals(typeof(Guid)) || type.Equals(typeof(DateTimeOffset)) || type.Equals(typeof(TimeSpan)))
    {
        isBindable = true;
    }

    return isBindable;
}

public static List<string> GetEntityKeyProperties(Type type)
{
    List<string> keyProperties = new List<string>();

    PropertyInfo[] properties = type.GetProperties();

    foreach (PropertyInfo pi in properties)
    {
        System.Object[] attributes = pi.GetCustomAttributes(true);

        if (pi.Name.Equals("ID", StringComparison.OrdinalIgnoreCase)) {
			keyProperties.Add(pi.Name);
			break;
		}

        foreach (object attribute in attributes)
        {
			if (attribute is EdmScalarPropertyAttribute)
            {
                if ((attribute as EdmScalarPropertyAttribute).EntityKeyProperty == true)
                {
                    keyProperties.Add(pi.Name);
                }
            } else if(attribute is ColumnAttribute) {
                if ((attribute as ColumnAttribute).IsPrimaryKey == true)
                {
                    keyProperties.Add(pi.Name);
                }
            }
            else if(attribute is System.ComponentModel.DataAnnotations.KeyAttribute) {
	                keyProperties.Add(pi.Name);
            }
			


        }
    }

    return keyProperties;
}
#>